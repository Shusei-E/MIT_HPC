#           selectize=TRUE
#         ),
#         sliderInput("years", "Select years:", sep="",
#                     min = 1900, max = 2015, value = c(1900,2015)),
#         submitButton("Update Results")
#       ),
#
#       mainPanel(
#         verbatimTextOutput("summary")
#       )
#     )
#   ),
#
#   tabPanel("Yearly data",
#            titlePanel("Download country data"),
#            sidebarLayout(
#              sidebarPanel(
#                sliderInput("year", "Select year:", sep="",
#                            min=1900, max=2015, value=1962),
#                submitButton("Update Results")
#              ),
#
#              mainPanel(
#                verbatimTextOutput("summary")
#              )
#            )
#   ),
#   navbarMenu("More",
#     tabPanel("About",
#              titlePanel("About Us")
#     ),
#     tabPanel("Methodology",
#              titlePanel("About Us")
#     )
#   )
#
# )
ui <- navbarPage(
"Trade lab (demo)",
tabPanel("Dyadic data",
titlePanel("Download dyadic data"),
sidebarPanel(
uiOutput("countryASelector"),
uiOutput("countryBSelector"),
sliderInput("years",
"Select years:",
sep="",
min = 1900,
max = 2015,
value = c(1962,2015)),
submitButton("Update Results")
),
mainPanel(
h4("Observations"),
tableOutput("dyadic_tbl")
)
)
)
server <- function(input, output, session) {
countries <- conn %>% tbl("country_year") %>% select(iso3c) %>% as.data.frame
countries <- unique(countries$iso3c)
output$countryASelector <- renderUI({
selectizeInput(
'countryA',
'Select country:',
choices = as.list(countries),
multiple = TRUE
)
})
output$countryBSelector <- renderUI({
selectizeInput(
'countryB',
'Select partner:',
choices = as.list(countries),
multiple = TRUE
)
})
output$dyadic_tbl <- renderTable({
conn %>% tbl("dyad_year") %>%
select(Country="iso3cA", Partner="iso3cB", RTA="rta", AtWar="at_war", Year="year") %>%
head(10)
})
}
shinyApp(ui = ui, server = server)
foreach(i=1:10, .combine=rbind) %do% result <- i**2
library(foreach)
foreach(i=1:10, .combine=rbind) %do% result <- i**2
foreach(i=1:10, .combine=rbind) %do% i**2
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
install.packages("microbenchmark")
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
for (i in 1:10) {
i*2
}
)
boxplot(mbm)
A <- seq(1:10)**2
A
A <- seq(1:100)**2
B <- seq(101:201)**2
mbm <- microbenchmark(
A <- seq(1:1000)**2
B <- seq(1001:2001)**2
A + B
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000)**2
B <- seq(1001:2001)**2
print(A + B)
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000)**2
B <- seq(1001:2000)**2
print(A + B)
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000)**2
B <- seq(1001:2000)**2
print(A + B)
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
print(A + B)
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
print(A + B)
)
boxplot(mbm)
A
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
print(A + B)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
print(A + B)
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
print(A + B)
)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
C <- A + B
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
C <- A + B
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
C <- A + B
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
C <- A + B
)
mbm <- microbenchmark(
A <- seq(1:1000000)**2;
B <- seq(1000001:2000000)**2;
C <- A + B
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2;
B <- seq(1000001:2000000)**2;
C <- A + B;
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2;
B <- seq(1000001:2000000)**2;
C <- A + B)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
C <- A + B)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
B <- seq(1000001:2000000)**2
)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm)
boxplot(mbm)
boxplot(mbm)
boxplot(mbm)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm)
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:1000000)**2
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:10000000)**2
)
mbm <- microbenchmark(
A <- seq(1:5000000)**2
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:5000000)**2
print sum(A)
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:5000000)**2
print(sum(A))
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:5000000)**2; print(sum(A))
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- seq(1:5000000)**2, print(sum(A))
)
boxplot(mbm, unit="s")
mbm <- microbenchmark(
A <- sum(seq(1:5000000)**2)
)
boxplot(mbm, unit="s")
seq(1:5000000)**2
sum(seq(1:5000000)**2)
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark(
A <- sum(seq(1:5000000)**2)
)
boxplot(mbm, unit="s")
library(doParallel)
library(foreach)
registerDoParallel(cores=2)
foreach(1:5000000, .combine="+") %dopar% i**2
library(microbenchmark); library(ggplot2)
mbm <- microbenchmark( for (i in 1:10) {
i*2 }
) boxplot(mbm)
mbm <- microbenchmark(foreach(1:10, .combine="+") %dopar% i*2)
library(microbenchmark); library(ggplot2); library(doParallel)
library(microbenchmark); library(ggplot2); library(doParallel)
mbm <- microbenchmark(foreach(1:10, .combine="+") %do% i*2)
boxplot(mbm)
boxplot(mbm, "s")
boxplot(mbm, "s")
foreach(1:5000000, .combine="+") %do% i**2
registerDoParallel(cores=3)
foreach(1:5000000, .combine="+") %dopar% i**2
library(haven)
library(MASS)
library(foreach)
library(doParallel)
d <- read_dta("repdata.dta")
d <- d[d$onset != 4,]
formula <- onset ~ warl + gdpenl + lpopl1 + lmtnest + ncontig + Oil +
nwstate + instab + polity2l + ethfrac + relfrac
dobootstrap <- function(...) {
# Create a bootstrap sample
idxs <- sample(1:nrow(d), replace=TRUE)
# Create a bootstrap sample
D <- d[idxs,]
# Get logit estimates
fit <- glm(formula, data=D, family=binomial(link = "logit"))
}
system.time(sapply(1:5, dobootstrap))
setwd("~/Dropbox (MIT)/methodslab/workshops/hpc__10_20_2017/demos/app1")
d <- read_dta("repdata.dta")
d <- d[d$onset != 4,]
formula <- onset ~ warl + gdpenl + lpopl1 + lmtnest + ncontig + Oil +
nwstate + instab + polity2l + ethfrac + relfrac
dobootstrap <- function(...) {
# Create a bootstrap sample
idxs <- sample(1:nrow(d), replace=TRUE)
# Create a bootstrap sample
D <- d[idxs,]
# Get logit estimates
fit <- glm(formula, data=D, family=binomial(link = "logit"))
}
system.time(sapply(1:5, dobootstrap))
system.time(foreach(i=1:5, .combine='cbind') %dopar% dobootstrap())
system.time(sapply(1:100, dobootstrap))
system.time(foreach(i=1:100, .combine='cbind') %dopar% dobootstrap())
setwd("~/Dropbox (MIT)/methodslab/workshops/hpc__10_20_2017/demos/app2")
library("foreach")
library("doParallel")
dfCounties <- read.csv("counties.csv")
dfCounties <- na.omit(dfCounties)
mCounties <- as.matrix(dfCounties[, 1:2])
mCountiesSmall <- mCounties[1:400, ]
##########
# SERIAL #
##########
calcPWDe <- function(mat) {
# Brute force calculation of each individual pair
out <- matrix(data = NA, nrow = nrow(mat), ncol = nrow(mat))
for (row in 1:nrow(out)) {
for (col in 1:ncol(out)) {
# Calculate Euclidean distance
out[row, col] <- sqrt(((mat[row, 1] - mat[col, 1]) ^ 2 +
(mat[row, 2] - mat[col, 2]) ^ 2))
}
}
return(out)
}
mCounties <- as.matrix(dfCounties[, 1:2])
system.time(calcPWDe(mCountiesSmall))
system.time(calcPWDe(mCounties))
calcPWDv <- function(mat) {
# Distance calculation over entire rows
out <- matrix(data = NA, nrow = nrow(mat), ncol = nrow(mat))
for (row in 1:nrow(out)) {
out[row, ] <- sqrt(((mat[row, 1] - mat[, 1]) ^ 2 +
##                !^!
(mat[row, 2] - mat[, 2]) ^ 2
##                !^!
))
}
return(out)
}
system.time(calcPWDv(mCountiesSmall))
system.time(calcPWDv(mCounties))
ncores <- 2
registerDoParallel(ncores)
# To even further optimize,
# let's divide up counties over number of cores.
mRanges <- matrix(NA, nrow = ncores, ncol = 3)
## initial #/per worker
mRanges[, 3] <- floor(nrow(dfCounties)/ncores)
## number short
nShort <- nrow(dfCounties) - sum(mRanges[, 3])
## adj #/per worker
mRanges[, 3] <- mRanges[, 3] + c(rep(1, nShort), rep(0, ncores - nShort))
## worker end points
mRanges[, 2] <- cumsum(mRanges[, 3])
## worker start points
mRanges[, 1] <- mRanges[, 2] - mRanges[, 3] + 1
calcPWDfe <- function(mat) {
# Let's use the row-wise computation to really
# optimize this
mOut <- foreach(i = 1:ncores,
.combine = rbind,
.noexport = "dfCounties",
.export = c("mRanges", "mCounties")) %dopar% {
mTmp <- matrix(NA,
nrow = mRanges[, 3],
ncol = nrow(mat)
)
for(j in mRanges[i, 1]:mRanges[i, 2]) {
mTmp[i, ] <- sqrt((mat[i, 1]  - mat[, 1]) ^ 2 +
(mat[i, 2]  - mat[, 2]) ^ 2)
}
return(mTmp)
}
return(mOut)
}
system.time(calcPWDfe(mCountiesSmall))
system.time(calcPWDfe(mCountiesSmall))
system.time(calcPWDfe(mCountiesSmall))
system.time(calcPWDfe(mCountiesSmall))
system.time(calcPWDfe(mCounties))
bs <- c()
for (i in 1:100) {
bs <- c(bs, system.time(calcPWDfe(mCountiesSmall))[1])
}
system.time(calcPWDv(mCounties))
system.time(calcPWDv(mCounties))
